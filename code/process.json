[{
  "id" : "6z5it4",
  "name" : "install_dependencies",
  "description" : null,
  "code" : "import numpy as np\nimport pandas as pd\nimport skgstat as skg\nfrom sklearn.preprocessing import QuantileTransformer\nimport matplotlib.pyplot as plt\nimport gstatsim as gs\n\n# plot utility functions\nfrom plot_utilities import *",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "vzrekq",
  "name" : "plot_utilities",
  "description" : null,
  "code" : "import uuid\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nfrom matplotlib.colors import LightSource\n\n\ndef make_colorbar(fig, im, vmin, vmax, clabel, ax=None):\n    if ax is None:\n        ax = plt.gca()\n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes('right', size='5%', pad=0.1)\n    cbar = plt.colorbar(im, ticks=np.linspace(vmin, vmax, 11), cax=cax)\n    cbar.set_label(clabel, rotation=270, labelpad=15)\n    return cbar\n\n\ndef splot2D(df, title, xlabel='X [m]', ylabel='Y [m]', clabel='Bed [m]', x='X', y='Y', c='Bed',\n            vmin=-400, vmax=600, s=0.5):\n    fig, ax = plt.subplots(1, figsize=(5, 5))\n    im = plt.scatter(df[x], df[y], c=df[c], vmin=vmin, vmax=vmax,\n                     marker='.', s=s, cmap='gist_earth')\n    plt.title(title)\n    plt.xlabel(xlabel);\n    plt.ylabel(ylabel)\n    plt.locator_params(nbins=5)\n\n    # make colorbar\n    cbar = make_colorbar(fig, im, vmin, vmax, clabel)\n\n    ax.axis('scaled')\n    plt.savefig(f'{uuid.uuid4().hex}.png')\n    # plt.show()\n\n\ndef mplot1(Pred_grid_xy, sim, rows, cols, title, xlabel='X [m]', ylabel='Y [m]',\n           clabel='Bed [m]', vmin=-400, vmax=600, hillshade=False, titlepad=None):\n    x_mat = Pred_grid_xy[:, 0].reshape((rows, cols))\n    y_mat = Pred_grid_xy[:, 1].reshape((rows, cols))\n    mat = sim.reshape((rows, cols))\n\n    xmin = Pred_grid_xy[:, 0].min();\n    xmax = Pred_grid_xy[:, 0].max()\n    ymin = Pred_grid_xy[:, 1].min();\n    ymax = Pred_grid_xy[:, 1].max()\n\n    cmap = plt.get_cmap('gist_earth')\n\n    fig, ax = plt.subplots(1, figsize=(5, 5))\n    im = plt.pcolormesh(x_mat, y_mat, mat, vmin=vmin, vmax=vmax, cmap=cmap)\n\n    if hillshade == True:\n        # Shade from the northeast, with the sun 45 degrees from horizontal\n        ls = LightSource(azdeg=45, altdeg=45)\n\n        # leaving the dx and dy as 1 means a vertical exageration equal to dx/dy\n        hillshade = ls.hillshade(mat, vert_exag=1, dx=1, dy=1, fraction=1.0)\n        plt.pcolormesh(x_mat, y_mat, hillshade, cmap='gray', alpha=0.1)\n\n    if titlepad is None:\n        plt.title(title)\n    else:\n        plt.title(title, pad=titlepad)\n    plt.xlabel(xlabel);\n    plt.ylabel(ylabel)\n    plt.xticks(np.linspace(xmin, xmax, 5))\n    plt.yticks(np.linspace(ymin, ymax, 5))\n\n    # make colorbar\n    if hillshade is False:\n        cbar = make_colorbar(fig, im, vmin, vmax, clabel)\n\n    ax.axis('scaled')\n    plt.savefig(f'{uuid.uuid4().hex}.png')\n    plt.show()\n\n\ndef mplot2_std(Pred_grid_xy, pred, std, rows, cols, title1, title2):\n    x_mat = Pred_grid_xy[:, 0].reshape((rows, cols))\n    y_mat = Pred_grid_xy[:, 1].reshape((rows, cols))\n    pred_mat = pred.reshape((rows, cols))\n    std_mat = std.reshape((rows, cols))\n\n    xmin = Pred_grid_xy[:, 0].min();\n    xmax = Pred_grid_xy[:, 0].max()\n    ymin = Pred_grid_xy[:, 1].min();\n    ymax = Pred_grid_xy[:, 1].max()\n\n    fig, [ax1, ax2] = plt.subplots(1, 2, figsize=(10, 5))\n\n    im = ax1.pcolormesh(x_mat, y_mat, pred_mat, vmin=-400, vmax=600, cmap='gist_earth')\n    ax1.set_xticks(np.linspace(xmin, xmax, 5))\n    ax1.set_yticks(np.linspace(ymin, ymax, 5))\n    ax1.set_title(title1)\n    ax1.set_xlabel('X [m]');\n    ax1.set_ylabel('Y [m]')\n    ax1.axis('scaled')\n\n    # make colorbar\n    cbar = make_colorbar(fig, im, -400, 600, 'Bed [m]', ax=ax1)\n\n    im = ax2.pcolormesh(x_mat, y_mat, std_mat, vmin=0, vmax=150, cmap='gist_earth')\n    ax2.set_xticks(np.linspace(xmin, xmax, 5))\n    ax2.set_yticks(np.linspace(ymin, ymax, 5))\n    ax2.set_title(title2)\n    ax2.set_xlabel('X [m]');\n    ax2.set_ylabel('Y [m]')\n    ax2.axis('scaled')\n\n    # make colorbar\n    cbar = make_colorbar(fig, im, 0, 150, 'Bed [m]', ax=ax2)\n\n    plt.tight_layout()\n    plt.savefig(f'{uuid.uuid4().hex}.png')\n    plt.show()\n\n\ndef mplot2_hillshade(Pred_grid_xy, sim1, sim2, rows, cols, title1, title2):\n    x_mat = Pred_grid_xy[:, 0].reshape((rows, cols))\n    y_mat = Pred_grid_xy[:, 1].reshape((rows, cols))\n    sim1_mat = sim1.reshape((rows, cols))\n    sim2_mat = sim2.reshape((rows, cols))\n\n    xmin = Pred_grid_xy[:, 0].min();\n    xmax = Pred_grid_xy[:, 0].max()\n    ymin = Pred_grid_xy[:, 1].min();\n    ymax = Pred_grid_xy[:, 1].max()\n\n    plots = [sim1_mat, sim2_mat]\n    titles = [title1, title2]\n\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    for i, (ax, plot) in enumerate(zip(axs, plots)):\n        ax.pcolormesh(x_mat, y_mat, plot, vmin=-400, vmax=600, cmap='gist_earth')\n\n        # Shade from the northeast, with the sun 45 degrees from horizontal\n        ls = LightSource(azdeg=45, altdeg=45)\n\n        # leaving the dx and dy as 1 means a vertical exageration equal to dx/dy\n        hillshade = ls.hillshade(plot, vert_exag=1, dx=1, dy=1, fraction=1.0)\n        ax.pcolormesh(x_mat, y_mat, hillshade, cmap='gray', alpha=0.1)\n\n        ax.set_title(f'{titles[i]}')\n        ax.set_xlabel('X [m]')\n        if i == 0:\n            ax.set_ylabel('Y [m]')\n        ax.set_xticks(np.linspace(xmin, xmax, 5))\n        ax.set_yticks(np.linspace(ymin, ymax, 5))\n        ax.axis('scaled')\n\n    plt.tight_layout()\n    plt.savefig(f'{uuid.uuid4().hex}.png')\n    plt.show()\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "2u9n3d",
  "name" : "subglacial_topography_plot",
  "description" : null,
  "code" : "from plot_utilities import *\nfrom install_dependencies import *\n\ndf_bed = pd.read_csv('https://github.com/GatorGlaciology/GStatSim/raw/main/demos/data/greenland_test_data.csv')\ndf_bed = df_bed[df_bed['Bed'] <= 700]\ndf_bed.head()\nsplot2D(df=df_bed, title='Subglacial topography data')",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "oikovr",
  "name" : "gridded_topography_plot",
  "description" : null,
  "code" : "import uuid\nfrom install_dependencies import *\nfrom plot_utilities import *\nfrom subglacial_topography_plot import df_bed\n\nres = 1000\ndf_grid, grid_matrix, rows, cols = gs.Gridding.grid_data(df_bed, 'X', 'Y', 'Bed', res)\n# plot gridded bed\nfig, ax = plt.subplots(1, figsize=(5,5))\nim = plt.imshow(grid_matrix, cmap='gist_earth', vmin=-400, vmax=600,\n                interpolation='none', origin='upper')\nplt.title('Gridded topography')\nplt.xlabel('X [px]'); plt.ylabel('Y [px]')\n\n# make color bar\ncbar = make_colorbar(fig, im, -400, 600, 'Bed [m]')\n\nax.axis('scaled')\nplt.savefig(f'{uuid.uuid4().hex}.png')\n# plt.show()\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "r5qlro",
  "name" : "normal_score_transformation",
  "description" : null,
  "code" : "import uuid\nfrom install_dependencies import *\nfrom plot_utilities import *\nfrom gridded_topography_plot import *\n\ndf_grid.X.min(), df_grid.X.max()\ndf_grid = df_grid[df_grid['Z'].isnull() == False]\ndf_grid.head()\n\ndata = df_grid['Z'].values.reshape(-1,1)\nnst_trans = QuantileTransformer(n_quantiles=500, output_distribution='normal').fit(data)\ndf_grid['Nbed'] = nst_trans.transform(data) \n\nplt.subplot(121)\nplt.hist(df_grid['Z'], facecolor='red', bins=50, alpha=0.2, edgecolor='black')\nplt.xlim([-700,700]); \nplt.xlabel('Elevation [m]'); plt.ylabel('Frequency'); plt.title('Raw bed elevation')\nplt.grid(True)\n\n# plot normal score bed histogram (with weights)\nplt.subplot(122)\nplt.hist(df_grid['Nbed'], facecolor='red', bins=50, alpha=0.2, edgecolor='black')\nplt.xlim([-3.5,3.5]); \nplt.xlabel('Normalized elevation'); plt.ylabel('Frequency'); plt.title('Normalized elevation')\nplt.grid(True)\nplt.subplots_adjust(left=0.0, bottom=0.0, right=1.8, top=1.0, wspace=0.2, hspace=0.3)\nplt.savefig(f'{uuid.uuid4().hex}.png')\n# plt.show()",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "hyf9o1",
  "name" : "transformed_data_plot",
  "description" : "python",
  "code" : "from normal_score_transformation import *\nsplot2D(df=df_grid, title='Transformed bed data', c='Nbed', vmin=-3, vmax=3, s=5)",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "a9jrs1",
  "name" : "isotropic_experimental_variogram",
  "description" : null,
  "code" : "from normal_score_transformation import *\n\n# compute experimental (isotropic) variogram\ncoords = df_grid[['X','Y']].values\nvalues = df_grid['Nbed']\n\nmaxlag = 50000      # maximum range distance\nn_lags = 70         # num of bins\n\n# compute variogram\nV1 = skg.Variogram(coords, values, bin_func='even', n_lags=n_lags, maxlag=maxlag, normalize=False)\n\n# extract variogram values\nxdata = V1.bins\nydata = V1.experimental\n\nplt.figure(figsize=(6,4))\nplt.scatter(xdata, ydata, s=12, c='g')\nplt.title('Isotropic Experimental Variogram')\nplt.xlabel('Lag (m)'); plt.ylabel('Semivariance')\nplt.savefig(f'{uuid.uuid4().hex}.png')\n# plt.show()",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "8hyi80",
  "name" : "anisotropoic_experimental_variogram",
  "description" : null,
  "code" : "from plot_utilities import *\nfrom install_dependencies import *\nfrom isotropic_experimental_variogram import *\n\nV0 = skg.DirectionalVariogram(coords, values, bin_func = \"even\", n_lags = n_lags, \n                                  maxlag = maxlag, normalize=False, azimuth=0, tolerance=15)\n\nV45 = skg.DirectionalVariogram(coords, values, bin_func = \"even\", n_lags = n_lags, \n                                  maxlag = maxlag, normalize=False, azimuth=45, tolerance=15)\n\nV90 = skg.DirectionalVariogram(coords, values, bin_func = \"even\", n_lags = n_lags, \n                                   maxlag = maxlag, normalize=False, azimuth=90, tolerance=15)\n\nV135 = skg.DirectionalVariogram(coords, values, bin_func = \"even\", n_lags = n_lags, \n                                  maxlag = maxlag, normalize=False, azimuth=135, tolerance=15)\n\nx0 = V0.bins\ny0 = V0.experimental\n\nx45 = V45.bins\ny45 = V45.experimental\n\nx90 = V90.bins\ny90 = V90.experimental\n\nx135 = V135.bins\ny135 = V135.experimental\n\nplt.figure(figsize=(6,4))\nplt.scatter(x0, y0, s=12, label='0 degrees (East-West)')\nplt.scatter(x45, y45,s=12, c='g', label='45 degrees')\nplt.scatter(x90, y90, s=12, c='r', label='90 degrees')\nplt.scatter(x135, y135, s=12, c='k', label='135 degrees')\nplt.title('Anisotropoic experimental variogram')\nplt.xlabel('Lag [m]'); plt.ylabel('Semivariance')\nplt.legend(loc='lower right')\nplt.savefig(f'{uuid.uuid4().hex}.png')\nplt.show()",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
